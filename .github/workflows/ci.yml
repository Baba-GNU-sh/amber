name: ci

on: push

jobs:
  Test:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
    
    - name: Install Deps
      run: |
        conan profile new default --detect && conan profile update settings.compiler.libcxx=libstdc++11 default
        CONAN_SYSREQUIRES_MODE=enabled conan install -if ${{github.workspace}}/build .
        sudo apt-get install -y gcovr

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug -DCMAKE_MODULE_PATH=${{github.workspace}}/build -DBUILD_TESTS=ON -DBUILD_COVERAGE=ON -DUSE_SANITIZERS=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --verbose

    - name: Coverage
      working-directory: ${{github.workspace}}/build
      run: gcovr --root .. --xml --output coverage.xml --exclude '.*/stb_image.h'

    - uses: codecov/codecov-action@v2
      with:
        files: ${{github.workspace}}/build/coverage.xml
        flags: unittests # optional
        name: codecov-umbrella # optional
        fail_ci_if_error: true # optional (default = false)
        verbose: true # optional (default = false)

  Ubuntu:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
    
    - name: Install Deps
      run: |
        conan profile new default --detect && conan profile update settings.compiler.libcxx=libstdc++11 default
        CONAN_SYSREQUIRES_MODE=enabled conan install -if ${{github.workspace}}/build .

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_MODULE_PATH=${{github.workspace}}/build

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build

    - name: Archive production artifacts
      uses: actions/upload-artifact@v3
      with:
        name: app
        path: |
          ${{github.workspace}}/build/src/glot/glotapp
  
  Windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
    
    - name: Install Deps
      run: |
        conan install -if ${{github.workspace}}/build --build=missing .

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}\build -DCMAKE_BUILD_TYPE=Release "-DCMAKE_MODULE_PATH=$('${{github.workspace}}\build' -replace '\\', '/')"

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}\build

    # - name: Archive production artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: app
    #     path: |
    #       ${{github.workspace}}/build/src/glot/glotapp
